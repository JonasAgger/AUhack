
AUhack.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000702  00000796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000702  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800200  00800200  00000796  2**0
                  ALLOC
  3 .stab         0000096c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00001258  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b0  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000448  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000acf  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00003580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d7  00000000  00000000  00003a0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e0       	ldi	r30, 0x02	; 2
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a6 30       	cpi	r26, 0x06	; 6
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
 124:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <SendPing>:
}

int SendPing()
{
	int overflow = 0;
	DDRC = 0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;
 130:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2a e0       	ldi	r18, 0x0A	; 10
 134:	2a 95       	dec	r18
 136:	f1 f7       	brne	.-4      	; 0x134 <SendPing+0x8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <SendPing+0xe>
	_delay_us(2);
	PORTC = 0xFF;
 13a:	88 b9       	out	0x08, r24	; 8
 13c:	8a e1       	ldi	r24, 0x1A	; 26
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <SendPing+0x12>
 142:	00 c0       	rjmp	.+0      	; 0x144 <SendPing+0x18>
	_delay_us(5);
	PORTC = 0;
 144:	18 b8       	out	0x08, r1	; 8
	DDRC = 0;
 146:	17 b8       	out	0x07, r1	; 7
	while (!(PINC & 1))
 148:	30 9b       	sbis	0x06, 0	; 6
 14a:	fe cf       	rjmp	.-4      	; 0x148 <SendPing+0x1c>
{}
	while (PINC & 1)
 14c:	30 9b       	sbis	0x06, 0	; 6
 14e:	0a c0       	rjmp	.+20     	; 0x164 <SendPing+0x38>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	25 e0       	ldi	r18, 0x05	; 5
 156:	2a 95       	dec	r18
 158:	f1 f7       	brne	.-4      	; 0x156 <SendPing+0x2a>
 15a:	00 00       	nop
	{
		_delay_us(1);
		overflow++;
 15c:	01 96       	adiw	r24, 0x01	; 1
	_delay_us(5);
	PORTC = 0;
	DDRC = 0;
	while (!(PINC & 1))
{}
	while (PINC & 1)
 15e:	30 99       	sbic	0x06, 0	; 6
 160:	f9 cf       	rjmp	.-14     	; 0x154 <SendPing+0x28>
 162:	02 c0       	rjmp	.+4      	; 0x168 <SendPing+0x3c>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
	{
		_delay_us(1);
		overflow++;
	}
	overflow /=29;
 168:	6d e1       	ldi	r22, 0x1D	; 29
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	0e 94 05 03 	call	0x60a	; 0x60a <__divmodhi4>
 170:	86 2f       	mov	r24, r22
 172:	97 2f       	mov	r25, r23
	return overflow;
}
 174:	08 95       	ret

00000176 <checkWay>:
volatile int distVenstre = 0;
volatile int distHoejre = 0;

void checkWay()
{
	stop();
 176:	0e 94 a4 01 	call	0x348	; 0x348 <stop>
	rotateRight();
 17a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <rotateRight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	91 ee       	ldi	r25, 0xE1	; 225
 182:	a4 e0       	ldi	r26, 0x04	; 4
 184:	81 50       	subi	r24, 0x01	; 1
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	a0 40       	sbci	r26, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <checkWay+0xe>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <checkWay+0x18>
 18e:	00 00       	nop
	_delay_ms(100);
	distHoejre = SendPing();
 190:	0e 94 96 00 	call	0x12c	; 0x12c <SendPing>
 194:	90 93 01 02 	sts	0x0201, r25
 198:	80 93 00 02 	sts	0x0200, r24
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	91 ee       	ldi	r25, 0xE1	; 225
 1a0:	a4 e0       	ldi	r26, 0x04	; 4
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	a0 40       	sbci	r26, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <checkWay+0x2c>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <checkWay+0x36>
 1ac:	00 00       	nop
	_delay_ms(100);
	rotateLeftFromRight();
 1ae:	0e 94 4d 02 	call	0x49a	; 0x49a <rotateLeftFromRight>
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	91 ee       	ldi	r25, 0xE1	; 225
 1b6:	a4 e0       	ldi	r26, 0x04	; 4
 1b8:	81 50       	subi	r24, 0x01	; 1
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	a0 40       	sbci	r26, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <checkWay+0x42>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <checkWay+0x4c>
 1c2:	00 00       	nop
	_delay_ms(100);
	distVenstre = SendPing();
 1c4:	0e 94 96 00 	call	0x12c	; 0x12c <SendPing>
 1c8:	90 93 03 02 	sts	0x0203, r25
 1cc:	80 93 02 02 	sts	0x0202, r24
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	91 ee       	ldi	r25, 0xE1	; 225
 1d4:	a4 e0       	ldi	r26, 0x04	; 4
 1d6:	81 50       	subi	r24, 0x01	; 1
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	a0 40       	sbci	r26, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <checkWay+0x60>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <checkWay+0x6a>
 1e0:	00 00       	nop
	_delay_ms(100);
	rotateMiddleFromLeft();
 1e2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <rotateMiddleFromLeft>
	
	if ((distHoejre < distVenstre) && (distVenstre > 50))
 1e6:	20 91 00 02 	lds	r18, 0x0200
 1ea:	30 91 01 02 	lds	r19, 0x0201
 1ee:	80 91 02 02 	lds	r24, 0x0202
 1f2:	90 91 03 02 	lds	r25, 0x0203
 1f6:	28 17       	cp	r18, r24
 1f8:	39 07       	cpc	r19, r25
 1fa:	9c f4       	brge	.+38     	; 0x222 <checkWay+0xac>
 1fc:	80 91 02 02 	lds	r24, 0x0202
 200:	90 91 03 02 	lds	r25, 0x0203
 204:	83 33       	cpi	r24, 0x33	; 51
 206:	91 05       	cpc	r25, r1
 208:	64 f0       	brlt	.+24     	; 0x222 <checkWay+0xac>
	{
		venstre();
 20a:	0e 94 80 01 	call	0x300	; 0x300 <venstre>
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	97 ea       	ldi	r25, 0xA7	; 167
 212:	a1 e6       	ldi	r26, 0x61	; 97
 214:	81 50       	subi	r24, 0x01	; 1
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	a0 40       	sbci	r26, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <checkWay+0x9e>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <checkWay+0xa8>
 21e:	00 00       	nop
 220:	20 c0       	rjmp	.+64     	; 0x262 <checkWay+0xec>
		_delay_ms(2000);
	}
	else if (distHoejre > 50)
 222:	80 91 00 02 	lds	r24, 0x0200
 226:	90 91 01 02 	lds	r25, 0x0201
 22a:	83 33       	cpi	r24, 0x33	; 51
 22c:	91 05       	cpc	r25, r1
 22e:	64 f0       	brlt	.+24     	; 0x248 <checkWay+0xd2>
	{
		hoejre();
 230:	0e 94 87 01 	call	0x30e	; 0x30e <hoejre>
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	97 ea       	ldi	r25, 0xA7	; 167
 238:	a1 e6       	ldi	r26, 0x61	; 97
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	a0 40       	sbci	r26, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <checkWay+0xc4>
 242:	00 c0       	rjmp	.+0      	; 0x244 <checkWay+0xce>
 244:	00 00       	nop
 246:	0d c0       	rjmp	.+26     	; 0x262 <checkWay+0xec>
		_delay_ms(2000);
	}
	else
	{
		tilbage();
 248:	0e 94 99 01 	call	0x332	; 0x332 <tilbage>
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	97 ea       	ldi	r25, 0xA7	; 167
 250:	a1 e6       	ldi	r26, 0x61	; 97
 252:	81 50       	subi	r24, 0x01	; 1
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	a0 40       	sbci	r26, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <checkWay+0xdc>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <checkWay+0xe6>
 25c:	00 00       	nop
		_delay_ms(2000);
		checkWay();
 25e:	0e 94 bb 00 	call	0x176	; 0x176 <checkWay>
	}
	
	stop();
 262:	0e 94 a4 01 	call	0x348	; 0x348 <stop>
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	91 ee       	ldi	r25, 0xE1	; 225
 26a:	a4 e0       	ldi	r26, 0x04	; 4
 26c:	81 50       	subi	r24, 0x01	; 1
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	a0 40       	sbci	r26, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <checkWay+0xf6>
 274:	00 c0       	rjmp	.+0      	; 0x276 <checkWay+0x100>
 276:	00 00       	nop
	_delay_ms(100);
}
 278:	08 95       	ret

0000027a <main>:
	return overflow;
}

int main()
{
	DDRC = 0xFF;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;
 27e:	84 b9       	out	0x04, r24	; 4
	Init_Timer1();
 280:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Init_Timer1>
	InitUART(9600, 8, 'N', 0);
 284:	60 e8       	ldi	r22, 0x80	; 128
 286:	75 e2       	ldi	r23, 0x25	; 37
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	48 e0       	ldi	r20, 0x08	; 8
 28e:	2e e4       	ldi	r18, 0x4E	; 78
 290:	00 e0       	ldi	r16, 0x00	; 0
 292:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <InitUART>
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	97 ea       	ldi	r25, 0xA7	; 167
 29a:	a1 e6       	ldi	r26, 0x61	; 97
 29c:	81 50       	subi	r24, 0x01	; 1
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	a0 40       	sbci	r26, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x22>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x2c>
 2a6:	00 00       	nop
	
	
	_delay_ms(2000);
	
	frem();
 2a8:	0e 94 8e 01 	call	0x31c	; 0x31c <frem>
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	91 ee       	ldi	r25, 0xE1	; 225
 2b0:	a4 e0       	ldi	r26, 0x04	; 4
 2b2:	81 50       	subi	r24, 0x01	; 1
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	a0 40       	sbci	r26, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0x38>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x42>
 2bc:	00 00       	nop
	
	while(1)
	{	
		_delay_ms(100);
		dist = SendPing();
 2be:	0e 94 96 00 	call	0x12c	; 0x12c <SendPing>
 2c2:	90 93 05 02 	sts	0x0205, r25
 2c6:	80 93 04 02 	sts	0x0204, r24
		if(dist < 50)
 2ca:	80 91 04 02 	lds	r24, 0x0204
 2ce:	90 91 05 02 	lds	r25, 0x0205
 2d2:	82 33       	cpi	r24, 0x32	; 50
 2d4:	91 05       	cpc	r25, r1
 2d6:	54 f7       	brge	.-44     	; 0x2ac <main+0x32>
		{
			checkWay();
 2d8:	0e 94 bb 00 	call	0x176	; 0x176 <checkWay>
			
			frem();
 2dc:	0e 94 8e 01 	call	0x31c	; 0x31c <frem>
 2e0:	e5 cf       	rjmp	.-54     	; 0x2ac <main+0x32>

000002e2 <Init_Timer1>:
void Init_Timer1()
{
	// 16000000 Hz /64 = 250 kHz
	// Therefore we have 250000 "steps" per second
	// - and want 0,25 seconds until next overflow
	OCR1A = 0;
 2e2:	10 92 89 00 	sts	0x0089, r1
 2e6:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 2ea:	10 92 8b 00 	sts	0x008B, r1
 2ee:	10 92 8a 00 	sts	0x008A, r1
	// Timer 1 in Normal Mode and PS = 64
	TCCR1A = 0b11110001;
 2f2:	81 ef       	ldi	r24, 0xF1	; 241
 2f4:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0b00000011;
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	80 93 81 00 	sts	0x0081, r24
	// Enable Timer 1 overflow interrupts
 2fe:	08 95       	ret

00000300 <venstre>:
#include "motor.h"

void venstre()
{
	OCR1B = 10;
 300:	8a e0       	ldi	r24, 0x0A	; 10
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	90 93 8b 00 	sts	0x008B, r25
 308:	80 93 8a 00 	sts	0x008A, r24
	//OCR1B = 50;
}
 30c:	08 95       	ret

0000030e <hoejre>:

void hoejre()
{
	OCR1A = 10;
 30e:	8a e0       	ldi	r24, 0x0A	; 10
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	90 93 89 00 	sts	0x0089, r25
 316:	80 93 88 00 	sts	0x0088, r24
	//OCR1B = 50;
}
 31a:	08 95       	ret

0000031c <frem>:

void frem()
{
	OCR1A = 10;
 31c:	8a e0       	ldi	r24, 0x0A	; 10
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 89 00 	sts	0x0089, r25
 324:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 10;
 328:	90 93 8b 00 	sts	0x008B, r25
 32c:	80 93 8a 00 	sts	0x008A, r24
}
 330:	08 95       	ret

00000332 <tilbage>:

void tilbage()
{
	OCR1A = 200;
 332:	88 ec       	ldi	r24, 0xC8	; 200
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	90 93 89 00 	sts	0x0089, r25
 33a:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 200;
 33e:	90 93 8b 00 	sts	0x008B, r25
 342:	80 93 8a 00 	sts	0x008A, r24
}
 346:	08 95       	ret

00000348 <stop>:

void stop()
{
	OCR1A = 0;
 348:	10 92 89 00 	sts	0x0089, r1
 34c:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 350:	10 92 8b 00 	sts	0x008B, r1
 354:	10 92 8a 00 	sts	0x008A, r1
 358:	08 95       	ret

0000035a <goForward>:
}


void goForward()
{
	PORTA = 0b00000001;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35e:	8f ed       	ldi	r24, 0xDF	; 223
 360:	9e e2       	ldi	r25, 0x2E	; 46
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <goForward+0x8>
 366:	00 c0       	rjmp	.+0      	; 0x368 <goForward+0xe>
 368:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00000011;
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	82 b9       	out	0x02, r24	; 2
 36e:	8f ed       	ldi	r24, 0xDF	; 223
 370:	9e e2       	ldi	r25, 0x2E	; 46
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <goForward+0x18>
 376:	00 c0       	rjmp	.+0      	; 0x378 <goForward+0x1e>
 378:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00000010;
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	82 b9       	out	0x02, r24	; 2
 37e:	8f ed       	ldi	r24, 0xDF	; 223
 380:	9e e2       	ldi	r25, 0x2E	; 46
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <goForward+0x28>
 386:	00 c0       	rjmp	.+0      	; 0x388 <goForward+0x2e>
 388:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00000110;
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	82 b9       	out	0x02, r24	; 2
 38e:	8f ed       	ldi	r24, 0xDF	; 223
 390:	9e e2       	ldi	r25, 0x2E	; 46
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <goForward+0x38>
 396:	00 c0       	rjmp	.+0      	; 0x398 <goForward+0x3e>
 398:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00000100;
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	82 b9       	out	0x02, r24	; 2
 39e:	8f ed       	ldi	r24, 0xDF	; 223
 3a0:	9e e2       	ldi	r25, 0x2E	; 46
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <goForward+0x48>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <goForward+0x4e>
 3a8:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00001100;
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	82 b9       	out	0x02, r24	; 2
 3ae:	8f ed       	ldi	r24, 0xDF	; 223
 3b0:	9e e2       	ldi	r25, 0x2E	; 46
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <goForward+0x58>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <goForward+0x5e>
 3b8:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00001000;
 3ba:	88 e0       	ldi	r24, 0x08	; 8
 3bc:	82 b9       	out	0x02, r24	; 2
 3be:	8f ed       	ldi	r24, 0xDF	; 223
 3c0:	9e e2       	ldi	r25, 0x2E	; 46
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <goForward+0x68>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <goForward+0x6e>
 3c8:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00001001;
 3ca:	89 e0       	ldi	r24, 0x09	; 9
 3cc:	82 b9       	out	0x02, r24	; 2
 3ce:	8f ed       	ldi	r24, 0xDF	; 223
 3d0:	9e e2       	ldi	r25, 0x2E	; 46
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <goForward+0x78>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <goForward+0x7e>
 3d8:	00 00       	nop
	_delay_us(3000);	
}
 3da:	08 95       	ret

000003dc <rotateMiddleFromLeft>:
		steps--;
	}
}

void rotateMiddleFromLeft()
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
	DDRA = 0xFF;
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b00000001;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	82 b9       	out	0x02, r24	; 2
 3e8:	cf e3       	ldi	r28, 0x3F	; 63
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
	int steps;
	// 45 deg right
	steps = 1023 / 16;
	while (steps > 0)
	{
		goForward();
 3ec:	0e 94 ad 01 	call	0x35a	; 0x35a <goForward>
 3f0:	21 97       	sbiw	r28, 0x01	; 1
	DDRA = 0xFF;
	PORTA = 0b00000001;
	int steps;
	// 45 deg right
	steps = 1023 / 16;
	while (steps > 0)
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <rotateMiddleFromLeft+0x10>
	{
		goForward();
		steps--;
	}
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <rotateRight>:
#include <avr/io.h>
#include <util/delay.h>
#include "Servo.h"

void rotateRight()
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
	DDRA = 0xFF;
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b00000001;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	82 b9       	out	0x02, r24	; 2
 406:	cf e3       	ldi	r28, 0x3F	; 63
 408:	d0 e0       	ldi	r29, 0x00	; 0
	int steps;
	// 45 deg right
	steps = 1023 / 16;
	while (steps > 0)
	{
		goForward();
 40a:	0e 94 ad 01 	call	0x35a	; 0x35a <goForward>
 40e:	21 97       	sbiw	r28, 0x01	; 1
	DDRA = 0xFF;
	PORTA = 0b00000001;
	int steps;
	// 45 deg right
	steps = 1023 / 16;
	while (steps > 0)
 410:	e1 f7       	brne	.-8      	; 0x40a <rotateRight+0x10>
	{
		goForward();
		steps--;
	}
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <goBackwards>:
	_delay_us(3000);	
}

void goBackwards()
{
	PORTA = 0b00001001;
 418:	89 e0       	ldi	r24, 0x09	; 9
 41a:	82 b9       	out	0x02, r24	; 2
 41c:	8f ed       	ldi	r24, 0xDF	; 223
 41e:	9e e2       	ldi	r25, 0x2E	; 46
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <goBackwards+0x8>
 424:	00 c0       	rjmp	.+0      	; 0x426 <goBackwards+0xe>
 426:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00001000;
 428:	88 e0       	ldi	r24, 0x08	; 8
 42a:	82 b9       	out	0x02, r24	; 2
 42c:	8f ed       	ldi	r24, 0xDF	; 223
 42e:	9e e2       	ldi	r25, 0x2E	; 46
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <goBackwards+0x18>
 434:	00 c0       	rjmp	.+0      	; 0x436 <goBackwards+0x1e>
 436:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00001100;
 438:	8c e0       	ldi	r24, 0x0C	; 12
 43a:	82 b9       	out	0x02, r24	; 2
 43c:	8f ed       	ldi	r24, 0xDF	; 223
 43e:	9e e2       	ldi	r25, 0x2E	; 46
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <goBackwards+0x28>
 444:	00 c0       	rjmp	.+0      	; 0x446 <goBackwards+0x2e>
 446:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00000100;
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	82 b9       	out	0x02, r24	; 2
 44c:	8f ed       	ldi	r24, 0xDF	; 223
 44e:	9e e2       	ldi	r25, 0x2E	; 46
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <goBackwards+0x38>
 454:	00 c0       	rjmp	.+0      	; 0x456 <goBackwards+0x3e>
 456:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00000110;
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	82 b9       	out	0x02, r24	; 2
 45c:	8f ed       	ldi	r24, 0xDF	; 223
 45e:	9e e2       	ldi	r25, 0x2E	; 46
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <goBackwards+0x48>
 464:	00 c0       	rjmp	.+0      	; 0x466 <goBackwards+0x4e>
 466:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00000010;
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	82 b9       	out	0x02, r24	; 2
 46c:	8f ed       	ldi	r24, 0xDF	; 223
 46e:	9e e2       	ldi	r25, 0x2E	; 46
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <goBackwards+0x58>
 474:	00 c0       	rjmp	.+0      	; 0x476 <goBackwards+0x5e>
 476:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00000011;
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	82 b9       	out	0x02, r24	; 2
 47c:	8f ed       	ldi	r24, 0xDF	; 223
 47e:	9e e2       	ldi	r25, 0x2E	; 46
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <goBackwards+0x68>
 484:	00 c0       	rjmp	.+0      	; 0x486 <goBackwards+0x6e>
 486:	00 00       	nop
	_delay_us(3000);
	PORTA = 0b00000001;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	82 b9       	out	0x02, r24	; 2
 48c:	8f ed       	ldi	r24, 0xDF	; 223
 48e:	9e e2       	ldi	r25, 0x2E	; 46
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <goBackwards+0x78>
 494:	00 c0       	rjmp	.+0      	; 0x496 <goBackwards+0x7e>
 496:	00 00       	nop
	_delay_us(3000);
 498:	08 95       	ret

0000049a <rotateLeftFromRight>:
		steps--;
	}
}

void rotateLeftFromRight()
{
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
	DDRA = 0xFF;
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b00000001;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	82 b9       	out	0x02, r24	; 2
 4a6:	cf e7       	ldi	r28, 0x7F	; 127
 4a8:	d0 e0       	ldi	r29, 0x00	; 0
	int steps;
	// 90 deg left
	steps = 1023 / 8;
	while (steps > 0)
	{
		goBackwards();
 4aa:	0e 94 0c 02 	call	0x418	; 0x418 <goBackwards>
 4ae:	21 97       	sbiw	r28, 0x01	; 1
	DDRA = 0xFF;
	PORTA = 0b00000001;
	int steps;
	// 90 deg left
	steps = 1023 / 8;
	while (steps > 0)
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <rotateLeftFromRight+0x10>
	{
		goBackwards();
		steps--;
	}
}
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <InitUART>:
	BaudRate: Wanted Baud Rate (110-115200).
	Databits: Wanted number of Data Bits (5-8).
	Parity: 'E' (Even parity), 'O' (Odd parity), otherwise No Parity.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, char Parity, unsigned char RX_Int)
{
 4b8:	cf 92       	push	r12
 4ba:	df 92       	push	r13
 4bc:	ef 92       	push	r14
 4be:	ff 92       	push	r15
 4c0:	0f 93       	push	r16
 4c2:	dc 01       	movw	r26, r24
 4c4:	cb 01       	movw	r24, r22
	if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
 4c6:	0f 2e       	mov	r0, r31
 4c8:	f2 e9       	ldi	r31, 0x92	; 146
 4ca:	cf 2e       	mov	r12, r31
 4cc:	ff ef       	ldi	r31, 0xFF	; 255
 4ce:	df 2e       	mov	r13, r31
 4d0:	ff ef       	ldi	r31, 0xFF	; 255
 4d2:	ef 2e       	mov	r14, r31
 4d4:	ff ef       	ldi	r31, 0xFF	; 255
 4d6:	ff 2e       	mov	r15, r31
 4d8:	f0 2d       	mov	r31, r0
 4da:	c8 0e       	add	r12, r24
 4dc:	d9 1e       	adc	r13, r25
 4de:	ea 1e       	adc	r14, r26
 4e0:	fb 1e       	adc	r15, r27
 4e2:	33 e9       	ldi	r19, 0x93	; 147
 4e4:	c3 16       	cp	r12, r19
 4e6:	31 ec       	ldi	r19, 0xC1	; 193
 4e8:	d3 06       	cpc	r13, r19
 4ea:	31 e0       	ldi	r19, 0x01	; 1
 4ec:	e3 06       	cpc	r14, r19
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f3 06       	cpc	r15, r19
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <InitUART+0x3e>
 4f4:	43 c0       	rjmp	.+134    	; 0x57c <InitUART+0xc4>
 4f6:	45 30       	cpi	r20, 0x05	; 5
 4f8:	08 f4       	brcc	.+2      	; 0x4fc <InitUART+0x44>
 4fa:	40 c0       	rjmp	.+128    	; 0x57c <InitUART+0xc4>
 4fc:	49 30       	cpi	r20, 0x09	; 9
 4fe:	f0 f5       	brcc	.+124    	; 0x57c <InitUART+0xc4>
	{
		// "Normal" clock, no multiprocessor mode (= default)
		UCSR0A = 0b00100000;
 500:	30 e2       	ldi	r19, 0x20	; 32
 502:	30 93 c0 00 	sts	0x00C0, r19
		// No interrupts enabled
		// Receiver enabled
		// Transmitter enabled
		// No 9 bit operation
		UCSR0B = 0b00011000;
 506:	38 e1       	ldi	r19, 0x18	; 24
 508:	30 93 c1 00 	sts	0x00C1, r19
		// Enable RX interrupt (if wanted by parameter)
		if (RX_Int)
 50c:	00 23       	and	r16, r16
 50e:	29 f0       	breq	.+10     	; 0x51a <InitUART+0x62>
		UCSR0B |= (1<<7);
 510:	e1 ec       	ldi	r30, 0xC1	; 193
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	30 81       	ld	r19, Z
 516:	30 68       	ori	r19, 0x80	; 128
 518:	30 83       	st	Z, r19
		// Asynchronous operation, 1 stop bit
		// Bit 2 and bit 1 controls the number of data bits
		UCSR0C = (DataBit-5)<<1;
 51a:	45 50       	subi	r20, 0x05	; 5
 51c:	44 0f       	add	r20, r20
 51e:	40 93 c2 00 	sts	0x00C2, r20
		// Set parity bits (if parity used)
		if (Parity == 'E')
 522:	25 34       	cpi	r18, 0x45	; 69
 524:	31 f4       	brne	.+12     	; 0x532 <InitUART+0x7a>
		UCSR0C |= 0b00100000;
 526:	e2 ec       	ldi	r30, 0xC2	; 194
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	20 81       	ld	r18, Z
 52c:	20 62       	ori	r18, 0x20	; 32
 52e:	20 83       	st	Z, r18
 530:	07 c0       	rjmp	.+14     	; 0x540 <InitUART+0x88>
		else if (Parity == 'O')
 532:	2f 34       	cpi	r18, 0x4F	; 79
 534:	29 f4       	brne	.+10     	; 0x540 <InitUART+0x88>
		UCSR0C |= 0b00110000;
 536:	e2 ec       	ldi	r30, 0xC2	; 194
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	20 81       	ld	r18, Z
 53c:	20 63       	ori	r18, 0x30	; 48
 53e:	20 83       	st	Z, r18
		// Set Baud Rate according to the parameter BaudRate:
		// Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
		//                   then write the two 8-bit registers separately):
		// Set Baud Rate according to the parameter BaudRate:
		UBRR0 = XTAL/(16*BaudRate) - 1;
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	aa 1f       	adc	r26, r26
 546:	bb 1f       	adc	r27, r27
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	aa 1f       	adc	r26, r26
 54e:	bb 1f       	adc	r27, r27
 550:	9c 01       	movw	r18, r24
 552:	ad 01       	movw	r20, r26
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	44 1f       	adc	r20, r20
 55a:	55 1f       	adc	r21, r21
 55c:	22 0f       	add	r18, r18
 55e:	33 1f       	adc	r19, r19
 560:	44 1f       	adc	r20, r20
 562:	55 1f       	adc	r21, r21
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	74 e2       	ldi	r23, 0x24	; 36
 568:	84 ef       	ldi	r24, 0xF4	; 244
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 18 03 	call	0x630	; 0x630 <__udivmodsi4>
 570:	21 50       	subi	r18, 0x01	; 1
 572:	30 40       	sbci	r19, 0x00	; 0
 574:	30 93 c5 00 	sts	0x00C5, r19
 578:	20 93 c4 00 	sts	0x00C4, r18
	}
}
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
 584:	cf 90       	pop	r12
 586:	08 95       	ret

00000588 <CharReady>:
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
   return UCSR0A & (1<<7);
 588:	80 91 c0 00 	lds	r24, 0x00C0
}
 58c:	80 78       	andi	r24, 0x80	; 128
 58e:	08 95       	ret

00000590 <ReadChar>:
Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
 590:	e0 ec       	ldi	r30, 0xC0	; 192
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	88 23       	and	r24, r24
 598:	ec f7       	brge	.-6      	; 0x594 <ReadChar+0x4>
  {}                        
  // Then return it
  return UDR0;
 59a:	80 91 c6 00 	lds	r24, 0x00C6
}
 59e:	08 95       	ret

000005a0 <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 5a0:	e0 ec       	ldi	r30, 0xC0	; 192
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	90 81       	ld	r25, Z
 5a6:	95 ff       	sbrs	r25, 5
 5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <SendChar+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 5aa:	80 93 c6 00 	sts	0x00C6, r24
}
 5ae:	08 95       	ret

000005b0 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 5b6:	88 81       	ld	r24, Y
 5b8:	88 23       	and	r24, r24
 5ba:	31 f0       	breq	.+12     	; 0x5c8 <SendString+0x18>
/*************************************************************************
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
 5bc:	21 96       	adiw	r28, 0x01	; 1
{
  // Repeat until zero-termination
  while (*Streng != 0)
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 5be:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 5c2:	89 91       	ld	r24, Y+
 5c4:	88 23       	and	r24, r24
 5c6:	d9 f7       	brne	.-10     	; 0x5be <SendString+0xe>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(int Tal)
{
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
 5d6:	27 97       	sbiw	r28, 0x07	; 7
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
 5e2:	be 01       	movw	r22, r28
 5e4:	6f 5f       	subi	r22, 0xFF	; 255
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	4a e0       	ldi	r20, 0x0A	; 10
 5ea:	50 e0       	ldi	r21, 0x00	; 0
 5ec:	0e 94 4e 03 	call	0x69c	; 0x69c <itoa>
  // - then send the string
  SendString(array);
 5f0:	ce 01       	movw	r24, r28
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <SendString>
}
 5f8:	27 96       	adiw	r28, 0x07	; 7
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <__divmodhi4>:
 60a:	97 fb       	bst	r25, 7
 60c:	09 2e       	mov	r0, r25
 60e:	07 26       	eor	r0, r23
 610:	0a d0       	rcall	.+20     	; 0x626 <__divmodhi4_neg1>
 612:	77 fd       	sbrc	r23, 7
 614:	04 d0       	rcall	.+8      	; 0x61e <__divmodhi4_neg2>
 616:	2e d0       	rcall	.+92     	; 0x674 <__udivmodhi4>
 618:	06 d0       	rcall	.+12     	; 0x626 <__divmodhi4_neg1>
 61a:	00 20       	and	r0, r0
 61c:	1a f4       	brpl	.+6      	; 0x624 <__divmodhi4_exit>

0000061e <__divmodhi4_neg2>:
 61e:	70 95       	com	r23
 620:	61 95       	neg	r22
 622:	7f 4f       	sbci	r23, 0xFF	; 255

00000624 <__divmodhi4_exit>:
 624:	08 95       	ret

00000626 <__divmodhi4_neg1>:
 626:	f6 f7       	brtc	.-4      	; 0x624 <__divmodhi4_exit>
 628:	90 95       	com	r25
 62a:	81 95       	neg	r24
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__udivmodsi4>:
 630:	a1 e2       	ldi	r26, 0x21	; 33
 632:	1a 2e       	mov	r1, r26
 634:	aa 1b       	sub	r26, r26
 636:	bb 1b       	sub	r27, r27
 638:	fd 01       	movw	r30, r26
 63a:	0d c0       	rjmp	.+26     	; 0x656 <__udivmodsi4_ep>

0000063c <__udivmodsi4_loop>:
 63c:	aa 1f       	adc	r26, r26
 63e:	bb 1f       	adc	r27, r27
 640:	ee 1f       	adc	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	a2 17       	cp	r26, r18
 646:	b3 07       	cpc	r27, r19
 648:	e4 07       	cpc	r30, r20
 64a:	f5 07       	cpc	r31, r21
 64c:	20 f0       	brcs	.+8      	; 0x656 <__udivmodsi4_ep>
 64e:	a2 1b       	sub	r26, r18
 650:	b3 0b       	sbc	r27, r19
 652:	e4 0b       	sbc	r30, r20
 654:	f5 0b       	sbc	r31, r21

00000656 <__udivmodsi4_ep>:
 656:	66 1f       	adc	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	1a 94       	dec	r1
 660:	69 f7       	brne	.-38     	; 0x63c <__udivmodsi4_loop>
 662:	60 95       	com	r22
 664:	70 95       	com	r23
 666:	80 95       	com	r24
 668:	90 95       	com	r25
 66a:	9b 01       	movw	r18, r22
 66c:	ac 01       	movw	r20, r24
 66e:	bd 01       	movw	r22, r26
 670:	cf 01       	movw	r24, r30
 672:	08 95       	ret

00000674 <__udivmodhi4>:
 674:	aa 1b       	sub	r26, r26
 676:	bb 1b       	sub	r27, r27
 678:	51 e1       	ldi	r21, 0x11	; 17
 67a:	07 c0       	rjmp	.+14     	; 0x68a <__udivmodhi4_ep>

0000067c <__udivmodhi4_loop>:
 67c:	aa 1f       	adc	r26, r26
 67e:	bb 1f       	adc	r27, r27
 680:	a6 17       	cp	r26, r22
 682:	b7 07       	cpc	r27, r23
 684:	10 f0       	brcs	.+4      	; 0x68a <__udivmodhi4_ep>
 686:	a6 1b       	sub	r26, r22
 688:	b7 0b       	sbc	r27, r23

0000068a <__udivmodhi4_ep>:
 68a:	88 1f       	adc	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	5a 95       	dec	r21
 690:	a9 f7       	brne	.-22     	; 0x67c <__udivmodhi4_loop>
 692:	80 95       	com	r24
 694:	90 95       	com	r25
 696:	bc 01       	movw	r22, r24
 698:	cd 01       	movw	r24, r26
 69a:	08 95       	ret

0000069c <itoa>:
 69c:	fb 01       	movw	r30, r22
 69e:	9f 01       	movw	r18, r30
 6a0:	e8 94       	clt
 6a2:	42 30       	cpi	r20, 0x02	; 2
 6a4:	c4 f0       	brlt	.+48     	; 0x6d6 <itoa+0x3a>
 6a6:	45 32       	cpi	r20, 0x25	; 37
 6a8:	b4 f4       	brge	.+44     	; 0x6d6 <itoa+0x3a>
 6aa:	4a 30       	cpi	r20, 0x0A	; 10
 6ac:	29 f4       	brne	.+10     	; 0x6b8 <itoa+0x1c>
 6ae:	97 fb       	bst	r25, 7
 6b0:	1e f4       	brtc	.+6      	; 0x6b8 <itoa+0x1c>
 6b2:	90 95       	com	r25
 6b4:	81 95       	neg	r24
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	64 2f       	mov	r22, r20
 6ba:	77 27       	eor	r23, r23
 6bc:	0e 94 3a 03 	call	0x674	; 0x674 <__udivmodhi4>
 6c0:	80 5d       	subi	r24, 0xD0	; 208
 6c2:	8a 33       	cpi	r24, 0x3A	; 58
 6c4:	0c f0       	brlt	.+2      	; 0x6c8 <itoa+0x2c>
 6c6:	89 5d       	subi	r24, 0xD9	; 217
 6c8:	81 93       	st	Z+, r24
 6ca:	cb 01       	movw	r24, r22
 6cc:	00 97       	sbiw	r24, 0x00	; 0
 6ce:	a1 f7       	brne	.-24     	; 0x6b8 <itoa+0x1c>
 6d0:	16 f4       	brtc	.+4      	; 0x6d6 <itoa+0x3a>
 6d2:	5d e2       	ldi	r21, 0x2D	; 45
 6d4:	51 93       	st	Z+, r21
 6d6:	10 82       	st	Z, r1
 6d8:	c9 01       	movw	r24, r18
 6da:	0c 94 6f 03 	jmp	0x6de	; 0x6de <strrev>

000006de <strrev>:
 6de:	dc 01       	movw	r26, r24
 6e0:	fc 01       	movw	r30, r24
 6e2:	67 2f       	mov	r22, r23
 6e4:	71 91       	ld	r23, Z+
 6e6:	77 23       	and	r23, r23
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <strrev+0x4>
 6ea:	32 97       	sbiw	r30, 0x02	; 2
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <strrev+0x18>
 6ee:	7c 91       	ld	r23, X
 6f0:	6d 93       	st	X+, r22
 6f2:	70 83       	st	Z, r23
 6f4:	62 91       	ld	r22, -Z
 6f6:	ae 17       	cp	r26, r30
 6f8:	bf 07       	cpc	r27, r31
 6fa:	c8 f3       	brcs	.-14     	; 0x6ee <strrev+0x10>
 6fc:	08 95       	ret

000006fe <_exit>:
 6fe:	f8 94       	cli

00000700 <__stop_program>:
 700:	ff cf       	rjmp	.-2      	; 0x700 <__stop_program>
